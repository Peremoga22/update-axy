@page "/history-transactions"
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@inject IStringLocalizer<App> _localizer


<div class="alert alert-primary" role="alert" @onclick="Collaps">
    <p class="text-right" style="color:blue;">
        @_localizer["Costs"]: @sumCost
        <i class="fa fa-bar-chart text-left p-2" style="font-size:36px; text-align:left;"></i>
    </p>

</div>
<div class="@(Collapsed? "collapse": "" )">

    <EditForm Model="@model" OnValidSubmit="HandleValidSubmitFilter" class="body  p-3 mb-5 rounded ">
        <DataAnnotationsValidator />
        <div>
            <div class="row d-flex">
                <div class="col-lg-12 form-group">
                    <label for="additional">@_localizer["Start Date"]:</label>
                    <input type="date" class="form-control" @bind-value="model.StartDate" />
                </div>
            </div>
            <div class="row d-flex">
                <div class="col-lg-12 form-group">
                    <label for="additional">@_localizer["End Date"]:</label>
                    <input type="date" class="form-control" @bind-value="model.EndDate" />
                </div>
            </div>
            <div class="row d-flex">
                <div class="col-lg-12 form-group">
                    <label for="additional">@_localizer["Choose an option"]:</label>
                    <InputSelect @bind-Value="model.Filter" class="form-control">
                        @foreach (var item in Enum.GetValues(typeof(Filter)))
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="ml-lg-3 m-3">
                <button type="submit" class="btn btn-primary">&nbsp;@_localizer["Search"]&nbsp;</button>
                <NavLink class="btn btn-outline-secondary" @onclick="ResetSearch">&nbsp;@_localizer["Reset"]&nbsp;</NavLink>
            </div>
        </div>
    </EditForm>
</div>
<table class="table table-striped table-bordered table-sm">
    <thead>
        <tr>
            <th class="text-right">@_localizer["Sum"]</th>
            <th class="text-right">@_localizer["Category"]</th>
            <th class="text-right">@_localizer["Note"]</th>
            <th class="text-right">@_localizer["Date time"]</th>
            <th class="text-center">@_localizer["Actions"]</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in modelList)
        {
            <tr>
               @if (item.IsActive)
                {
                    <td class="text-right" style="color:red">@item.Amount</td>
                    <td class="text-right">@item.Description</td>
                    <td class="text-right">@item.Note</td>                   
                    <td class="text-right">@item.TransactionDate.ToString("dd-MM-yyyy")</td>

                }
                else
                {
                    <td class="text-right" href="#" style="color:green">@item.Amount</td>
                    <td class="text-right">@item.Description</td>
                    <td class="text-right">@item.Note</td>
                    <td class="text-right">@item.TransactionDate.ToString("dd-MM-yyyy")</td>

                }

                <td class="text-center">
                    <button class="btn btn-sm btn-outline-dark">
                        <img @onclick="(() =>  Edit(item.ID))" src="https://img.icons8.com/external-kiranshastry-solid-kiranshastry/21/000000/external-edit-interface-kiranshastry-solid-kiranshastry.png" />
                    </button>
                    <button class="btn btn-sm btn-outline-danger">
                        <img @onclick="(() => Delete(item.ID))" disabled="@DeleteDisabled" src="https://img.icons8.com/ios/21/000000/delete-forever--v1.png" />
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
@if (popupTransaction)
{
    <EditForm Model="@model" OnValidSubmit="HandleValidSubmitPopup" class="body  p-3 mb-5 rounded ">
        <div class="modal" tabindex="-1" role="dialog" style="display:block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" style="color:green">Edit transaction!</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(() => ClosePopup())">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <table class="table table-striped table-bordered table-sm">
                            <tr class="form-group">
                                <td>Note</td>
                                <td><input class="form-control" type="text" @bind-value="model.Note" /></td>
                            </tr>
                            <tr class="form-group">
                                <td>Amount</td>
                                <td><input class="form-control" type="number" @bind-value="model.Amount" /></td>
                            </tr>
                            <tr class="form-group">
                                <td>Category</td>
                                <td>
                                    <InputSelect class="custom-select" @bind-Value="model.TransactionCategoryID">
                                        <option value="">Choose an option</option>
                                        @foreach (var e in categoryList.ToList())
                                         {
                                            <option value="@e.ID">@e.Description</option>
                                         }
                                    </InputSelect>
                                </td>                                                             
                            </tr>
                            <tr class="form-group">
                                <td>Note</td>
                                <td><input class="form-control" type="date" @bind-value="model.TransactionDate" /></td>
                            </tr>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save changes</button>
                        <button type="button" class="btn btn-secondary" @onclick="(() => ClosePopup())" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<TransactionDto> modelList = new List<TransactionDto>();
    List<TransactionCategoryDto> categoryList = new List<TransactionCategoryDto>();
    TransactionDto model = new TransactionDto();
    UserApp user = new UserApp();
    protected bool Collapsed = true;
    bool popup = false;
    decimal sumCost;
    string DeleteDisabled { get; set; } = null;
    string userId;
    bool popupTransaction = false;
    int editPopupId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier).Value;
            model.StartDate = DateTime.Now;
            model.EndDate = DateTime.Now;
            modelList = TransactionAdapter.GetTransaction(userId);
        }
    }

    public void ShowPopup(int id)
    {
        popup = true;

    }

    public void ClosePopup()
    {
        popup = false;
        popupTransaction = false;
    }

    private void HandleValidSubmitFilter()
    {
        if (model.Filter == "GetAll" || string.IsNullOrEmpty(model.Filter))
        {
            model.Filter = "GetAll";
            var count = 0;
            decimal sum = 0;
            decimal expenditureSum = 0;
            var modelListShow = new List<TransactionDto>();
            modelList = TransactionAdapter.GetTransaction(userId).Where(z => !string.IsNullOrEmpty(z.Description)).ToList();
            foreach (var item in modelList)
            {
                if(item.IsActive == false)
                {
                    sum = SumCounterAdapter.GetCurrentSum((int)item.TransactionTypeID);
                }
                else
                {
                    expenditureSum = SumCounterAdapter.GetCurrentSum((int)item.TransactionTypeID);
                }

              
                if (sum > 0)
                {
                    modelList[count].Amount = sum;

                }

                if (expenditureSum > 0)
                {
                    modelList[count].Amount = expenditureSum;
                }

                count++;
            }
        }

    }

    private void HandleValidSubmitPopup()
    {
        var transactionType = new TransactionTypeDto();
        model.TransactionType = transactionType;
        user.Id = userId;
        model.User = user;
        model.ID = editPopupId;
        var getTransactCategory = TransactionAdapter.GetTransaction(userId).Where(z=>z.ID == model.ID).FirstOrDefault();
        model.TransactionTypeID = getTransactCategory.TransactionTypeID;
        TransactionAdapter.SaveTransaction(model);

        modelList = TransactionAdapter.GetTransaction(userId).ToList();
        popupTransaction = false;
    }

    private void Collaps()
    {
        Collapsed = !Collapsed;
    }

    public void ResetSearch()
    {


    }

    public void Delete(int id)
    {
        DeleteDisabled = "disabled";
        TransactionAdapter.DeleteTransaction(id);
        modelList = TransactionAdapter.GetTransaction(userId);
    }

    protected void Edit(int id)
    {
        popupTransaction = true;
        editPopupId = id;
        model = TransactionAdapter.GetTransactionId(id);
        var getTransactCategory = TransactionAdapter.GetTransaction(userId).Where(z => z.ID == editPopupId).FirstOrDefault();
        model.TransactionCategoryID = getTransactCategory.TransactionCategoryID;
        categoryList = TransactionCategoryAdapter.GetTransactionCategories(userId).Where(z=>z.IsActive == model.IsActive).ToList();

    }

    public enum Filter
    {
        GetAll,
        Income,
        OutCome
    }
}
